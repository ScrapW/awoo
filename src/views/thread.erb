<!DOCTYPE HTML>
<html>
  <head>
    <link rel="stylesheet" type="text/css" href="/static/dangeru.css">
    <link rel="stylesheet" type="text/css" href="/static/css/font-awesome.min.css">
    <link rel="shortcut icon" href="/static/favicon.ico">
    <title>Thread <%= id %> on danger/<%= path %>/ Loading...</title>
    <script src="/static/common.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta property="og:url" content="http://<%= Config.get['hostname']%>/<%= path %>/<%= id %>">
    <link rel="shortcut icon" href="/static/favicon.ico">
<style>
.selected {
  border: 2px solid gold;
}
#hover {
  position: fixed;
  z-index: 10;
  background-color: black;
  border: 2px solid gold;
}
.post_number {
  font-size: 65%;
}
</style>
        <script>
          var replace = function(hash) {
            history.replaceState(undefined, undefined, "#");
            history.replaceState(undefined, undefined, hash);
          }
          if (!history.replaceState) {
            replace = function(a, b, hash) {
              window.location.hash = "#";
              window.location.hash = hash;
            };
          }
          var to_array = function(thing) {
            return Array.prototype.slice.call(thing, 0);
          }
          var select = function select(id) {
            replace("#comment-" + id.toString()) // bugfix for webkit
            to_array(document.getElementsByClassName("selected")).forEach(function(elem) { elem.classList.toggle("selected"); })
            var comment = document.getElementById("comment-" + id.toString());
            if (comment == null) return;
            comment.classList.add("selected")
            comment.scrollIntoView(true);
          }
          var select_id = function select_id(id) {
            replace("#id-" + id.toString()) // bugfix for webkit
            to_array(document.getElementsByClassName("selected")).forEach(function(elem) { elem.classList.toggle("selected"); })
            to_array(document.getElementsByClassName("comment")).forEach(function(elem) {
              if (elem.id == "hover") return;
              var hash = elem.getElementsByClassName("hash")[0].innerText;
              if (hash == id) elem.classList.toggle("selected");
            });
          }
          var hover = function hover(id, hovered) {
            var elem = document.getElementById("comment-" + id.toString());
            var hovered_elem = document.getElementById("comment-" + hovered.toString())
            hovered_elem.onmousemove = move;
            if (typeof(unitedPropertiesIf) != "undefined") return; // don't show #hover on mobile
            document.getElementById("hover").innerHTML = elem.innerHTML;
            document.getElementById("hover").style.display = "inline-block";
          }
          var unhover = function unhover() {
            document.getElementById("hover").innerHTML = ""
            document.getElementById("hover").style.display = "none";
          }
          var move = function move(e) {
            document.getElementById("hover").style.top = e.clientY + 5 + "px";
            document.getElementById("hover").style.left = e.clientX + 5 + "px";
          }
          var confirm_reload = function confirm_reload() {
            var span = document.createElement("span");
            // TODO extract these styles into a class so they can be themed later
            span.style.backgroundColor = "black";
            span.style.border = "4px solid #ED145B";
            span.style.padding = "6px";
            span.style.position = "fixed";
            span.style.top = "10%";
            span.style.right = "10%";
            span.style.color = "#ED145B";
            span.style.fontSize = "1.5em";
            span.appendChild(document.createTextNode("New replies detected - reload?"));
            span.appendChild(document.createElement("br"));
            var yes = document.createElement("button");
            yes.innerText = "Yes";
            yes.addEventListener("click", function() {
              window.location.reload();
            });
            var no = document.createElement("button");
            no.innerText = "No";
            no.addEventListener("click", function() {
              span.outerHTML = "";
            });
            span.appendChild(no);
            span.appendChild(yes);
            document.body.appendChild(span);
          }
          var fetch_number = function fetch_number() {
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function() {
                if (xhr.readyState == 4) {
                  if (xhr.status != 200) {
                    return; // silently ignore the error, maybe the thread was deleted or they disconnected from wifi
                  }
                  try {
                    var new_num = JSON.parse(xhr.responseText)["number_of_replies"]
                    if (total_number_of_posts == null) {
                      total_number_of_posts = new_num;
                      return;
                    }
                    if (new_num > total_number_of_posts) {
                      confirm_reload();
                      total_number_of_posts = new_num; // do not prompt twice (unless there are EVEN MORE replies)
                    }
                  } catch (e) {
                    console.log(e);
                  }
                }
            }
            xhr.open("GET", "/api/v2/thread/" + window.id.toString() + "/metadata");
            xhr.send();
          }
          var ol = function ol() {
            var submit_function = function() { submit_form(document.getElementById("form"), "/reply") };
            var submit_el = document.getElementById("submit");
            var GetItem = function(name) { var val = localStorage.getItem(name); return val == null ? "false" : val;};
            var captcha = document.getElementById("captcha");
            if (captcha) {
              captcha.addEventListener("keydown", function(e) {
                if (e.keyIdentifier == "U+000A" || e.keyIdentifier == 'Enter' || e.keyCode == 13) {
                  e.preventDefault();
                  submit_function();
                  return false;
                }
                return true;
              });
            }
            setInterval(fetch_number, 60000); // 60 seconds
            try {
              if (window.location.hash.indexOf("comment-") == 1) {
                select(window.location.hash.split("comment-")[1]);
              }
              if (window.location.hash.indexOf("id-") == 1) {
                select_id(window.location.hash.split("id-")[1]);
              }
            } catch (e) {
              // drop
            }
            <%= mobile_js %>
            var is_draw_bar_enabled = window.GM_getValue("bar", "false").toLowerCase() == "true" ? true : false; // hopefully this works on mobile
            if (submit_el && !is_draw_bar_enabled) {
              submit_el.addEventListener("click", submit_function);
            }
            window.id = <%= id.to_i %>;
            window.your_hash = <%= JSON.dump(your_hash); %>;
            <% if params[:watch] %>
              if (typeof(unitedPropertiesIf) != "undefined") {
                try {
                  unitedPropertiesIf.watchThread(window.id.toString());
                  unitedPropertiesIf.addPosted(window.id.toString(), window.id.toString(), window.your_hash, "false");
                } catch (e) {
                  // Must be on an old version of the app
                  unitedPropertiesIf.toast("Your version of the app appears to be out of date; The thread could not be added to the thread watcher");
                }
              }
            <% end %>
            // If userscript is disabled, update prop here. Otherwise it will be updated by the userscript
            if (typeof(unitedPropertiesIf) != "undefined" && unitedPropertiesIf.getProperty("userscript").toUpperCase() != "TRUE") {
              unitedPropertiesIf.setProperty(window.board + ":" + window.id, total_number_of_posts.toString());
            } else if (localStorage != null && localStorage.getItem("userscript") !== null && localStorage.getItem("userscript").toUpperCase() != "TRUE") {
              localStorage.setItem(window.board + ":" + window.id, total_number_of_posts.toString());
            }
            if (typeof(unitedPropertiesIf) == "undefined" || unitedPropertiesIf.getProperty("userscript").toUpperCase() == "TRUE") {
              Array.prototype.slice.call(document.getElementsByClassName("post_number"), 0).forEach(function(elem) {
                elem.style.display = "inline-block";
              });
              Array.prototype.slice.call(document.getElementsByClassName("referencer")).forEach(function(elem) {
                var refers_to = elem.getAttribute("data-refers-to");
                var is = elem.getAttribute("data-is");
                var _parent = document.getElementById("comment-" + refers_to);
                if (_parent == null) {
                  var color = refers_to;
                  if (!color.match(RegExp("[0-9a-fA-F]{6}"))) {
                    return;
                  }
                  // Only color it if this ID exists on this page.
                  var coloring_allowed = false;
                  Array.prototype.slice.call(document.getElementsByClassName("hash")).forEach(function(hash_elem) {
                    if (hash_elem.innerText == color)
                      coloring_allowed = true;
                  });
                  if (!coloring_allowed) return;
                  // don't need to pad to to 6 characters because we matched {6} above
                  color = "#" + color;
                  elem.style.color = color;
                  elem.previousSibling.style.color = color;
                  elem.addEventListener("click", function() {
                    select_id(refers_to);
                  });
                  return;
                }
                _parent = _parent.getElementsByClassName("post_number")[0];
                var new_link = document.createElement("a");
                new_link.href = "#comment-" + is;
                new_link.style.display = "inline-block";
                new_link.innerText = ">>" + is;
                new_link.style.marginLeft = "5px";
                new_link.style.fontSize = "inherit";
                new_link.classList.add("redtext");
                new_link.onmouseover = function() {
                  hover(is, refers_to);
                };
                new_link.onmouseout = function() { unhover(); };
                new_link.onclick = function(e) { select(is); e.preventDefault(); };
                _parent.appendChild(new_link);
              });
            }
            Array.prototype.slice.call(document.getElementsByClassName("comment"), 0).forEach(makeClickable);
            Array.prototype.slice.call(document.getElementsByClassName("jshide"), 0).forEach(function(elem) {
              elem.style.display = "none";
            });
            Array.prototype.slice.call(document.getElementsByClassName("jsunhide"), 0).forEach(function(elem) {
              elem.style.display = "inline-block";
            });
            var e = document.getElementById("redirect");
            if (e != null) e.value = "false";
            doWordcount("reply_box", <%= JSON.dump(session[:moderates] ? true : false) %>);
          }
          var makeClickable = function makeClickable(elem) {
            var child = elem.firstChild;
            if (child == null) return;
            do {
              if (child.nodeType == Node.TEXT_NODE) {
                child.data.replace(/https?:\/\/[^\s]+/, function(all) {
                  var args = Array.prototype.slice.call(arguments);
                  var offset = args[args.length - 2];
                  var newNode = child.splitText(offset);
                  newNode.data = newNode.data.substr(all.length)
                  var a = document.createElement("a");
                  a.href = all;
                  a.innerText = all;
                  a.classList.add("autogenerated-link")
                  child.parentNode.insertBefore(a, child.nextSibling);
                  child = newNode;
                })
              } else {
                makeClickable(child);
              }
            } while (child = child.nextSibling)
          }
          var submit_form = function submit_form(form, route) {
            if (typeof(unitedPropertiesIf) != "undefined") {
              if (unitedPropertiesIf.getProperty("watch_on_reply").toLowerCase() == "true") {
                unitedPropertiesIf.watchThread(<%= JSON.dump(id.to_s) %>);
              }
            }
            var data = new FormData(form);
            // Ask @lain for what this does
            // unless you need to know what it does because you're a spamfag, in which case get fucked
            var _0x288ea4=window[atob("ZGVjb2RlVVJJ")],_0x16a13a=window[_0x288ea4("%61%74%6f%62")],_0x2a56e0=document[_0x16a13a(_0x288ea4("%5a%32%56%30%52%57%78%6c%62%57%56%75%64%45%4a%35%53%57%51="))](_0x288ea4(_0x16a13a("JTczJTc1JTYyJTZkJTY5JTc0"))),_0x73e5=[_0x288ea4("%69%6e%6e%65%72%54%65%78%74"),_0x288ea4("%53%65%6e%64%69%6e%67%2e%2e%2e"),_0x288ea4("%64%69%73%61%62%6c%65%64")],p=Math[_0x288ea4("%72%61%6e%64%6f%6d")]()>.5,q=Math[_0x16a13a(_0x16a13a("Y21GdVpHOXQ="))]()<.5;(function(_0x219a0a,_0x2e56a0){var _0x16e13e=function(_0x28a60f){while(--_0x28a60f){_0x219a0a['push'](_0x219a0a['shift']());}};_0x16e13e(++_0x2e56a0);}(_0x73e5,0xc5));var _0x573e=function(_0x1db026,_0x11a305){_0x1db026=_0x1db026-0x0;var _0x288ae4=_0x73e5[_0x1db026];return _0x288ae4;};_0x2a56e0[_0x573e('0x0')]=!(p&&!(p||(p&&q)))||((q&&(q||p))&&!q);_0x2a56e0[_0x573e('0x1')]=_0x573e('0x2');
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function() {
                if (xhr.readyState == 4) {
                  if (xhr.status != 200) {
                    alert("errno = -EINVAL; return;\n\n" + xhr.responseText)
                    document.getElementById("submit").innerText = "Submit";
                    document.getElementById("submit").disabled = false;
                    return; // do not reload the page if there was an error
                  }
                  try {
                    var post_id = xhr.responseText.split("/")[1]
                    unitedPropertiesIf.addPosted(post_id, window.id.toString(), window.your_hash, "true")
                  } catch (e) {
                    // drop
                  }
                  window.location.reload();
                }
            }
            xhr.open("POST", route);
            xhr.send(data);
          }
          var reply_box_add = function reply_box_add(str) {
            document.getElementById("reply_box").value += str;
          }
        </script>
  </head>
  <body onLoad='ol();'>
    <div id="sitecorner">
      <a href="/<%= path %>"><img src="<%= banner %>" alt="danger/u/"></a>
      <% if archived then %>
        <div class="title red center" class="red center">This thread is permanently archived</div>
      <% end %>
      <span id="hover" class="comment" style="display: none"></span>
      <% last_date_modified = 0 %>
      <% i = 0 %>
      <% is_locked = false %>
      <% replies.each do |res| %>
        <% if i == 0 then %>
          <% is_locked = res[:is_locked] %>
          <% if path == "burg" then %>
            <div id="title">burg</div>
          <% else %>
            <div id="title"><%= Awoo.clean(res[:title]) %></div>
          <% end %>
          <script>
            window.board = <%= JSON.dump(res[:board]) %>;
            document.title = <%= JSON.dump(res[:title].gsub('</script>', "")) %> + " - danger/" + window.board + "/";
          </script>
          <%# I WILL MOVE IT LATER I PROMISE %>
          <meta property="og:title" content="<%= Awoo.clean(res[:title]) %> - /<%= res[:board] %>/">
          <meta property="og:description" content="<%= Awoo.clean(res[:comment]) %>">
          <% if moderator and res[:sticky] and has_permission(session, "sticky") then %>
            <form id="sticky-form" action="/sticky/<%= res[:post_id] %>" method="POST" class="comment-styled" style="display: inline-block;">
              <label for="stickyness">Adjust Stickyness </label>
              <input type="number" class="text_input" name="stickyness" style="width: 5em;" value="<%= res[:stickyness] %>" />
            </form>
            <button class="button_styled" onClick="submit_form(document.getElementById('sticky-form'), '/sticky/<%= res[:post_id] %>')">Submit</button>
          <% end %>
        <% end %>
        <%= erb :comment, :locals => {:board => path, :res => res, :moderator => moderator} %>
        <% last_date_modified = res[:date_posted] %>
        <% i += 1 %>
      <% end %>

      <div class="comment-styled thread-metadata">
        Total number of posts: <%= i.to_s %>,
        <script>
          var total_number_of_posts = <%= i.to_s %>;
        </script>
        last modified on:
        <span id='date_last_modified'>
          <%= Time.new(last_date_modified).strftime '%c' %>
        </span>
      </div>
      <script>
        var d = new Date(parseInt(<%= JSON.dump(last_date_modified.to_s) %> + "000"));
        document.getElementById("date_last_modified").innerHTML = d.toString();
      </script>
      <br />
      <% if is_locked then %>
        <% if archived then %>
          <div class="title red center" class="red center">This thread is permanently archived</div>
        <% else %>
          <div id="lockedcontainer" class="center">
            <div class="redtext">This thread is closed.</div>
            <% if moderator and has_permission(session, "lock") %>
              <i class="fa fa-lock" aria-hidden="true" onClick='unlockPost(<%= id.to_i.to_s %>)'></i>
            <% end %>
          </div>
        <% end %>
      <% else %>
        <a id="refresh" href="javascript:location.reload();">Refresh</a>
        <form id="form" action='/reply' method='post' class="center">
          <input type='text' style='display: none' name='board' id='board' value='<%= path %>' />
          <input type='text' style='display: none' name='parent' id='parent' value='<%= id %>' />
          <br />
          <%# Janitors of at least one board can capcode on ANY board %>
          <% if session[:username] %>
            <%= erb :capcode_dropdown, :locals => {:config => Config.get, :session => session} %>
          <% end %>
          <% if path == "burg" %>
            <input type="radio" value="burg" id="burg" name="content" /><label class="comment-styled" for="burg">burg</label>
          <br />
            <input type="radio" value="angry burg" id="angry_burg" name="content" /><label class="comment-styled" for="angry_burg">angry burg</label>
            <input id="reply_box" style="display: none" type="text" /> <!-- resolves wordcount errors -->
            <br />
          <% else %>
            <textarea id="reply_box" name='content' style="width: 100%;" placeholder='Reply'></textarea>
            <span class="jsunhide comment-styled" id="wordcount"></span>
          <% end %>
          <input class="jshide" type="submit" value="Submit without javascript" />
          <input style="display: none" type="text" name="redirect" id="redirect" value="true" />
          <%= erb :captcha, :locals => {:value => Xsrf.reply(path, id.to_i)} %>
        </form>
        <button class="button_styled jsunhide" style="display: none;" id="submit">Submit</button><br />
        <% if moderator and has_permission(session, "lock") %>
          <br />
          <i class="fa fa-unlock-alt thread-lock" aria-hidden="true" onClick='lockPost(<%= id.to_i.to_s %>)'></i>
        <% end %>
      <% end %>
    </div>
    <footer class="comment-styled">
      <%= Config.get["footer"] %>, <a href="https://github.com/dangeru/awoo/" class="footer">Awoo <%= settings.awoo_version %></a>
    </footer>
  </body>
</html>
